{% extends("layouts/master.twig") %}
{% block title %}
    Tags Management
{% endblock  %}

{% block content %}
<div class="flex">
    {% include 'layouts/aside.twig' with {active:"dashboard"}  %}

    <div class="my-10 w-[80%] mx-auto">
        <button id="openModal"
                class="px-4 py-2 my-5 bg-orange-600 text-white rounded-md shadow-md hover:bg-orange-700 transition">
            + Add Tag
        </button>

        <div id="tagModal" class="fixed inset-0 bg-black/40 bg-opacity-50 hidden flex items-center justify-center">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold text-gray-800">Add a New Tag</h2>
                    <button id="closeModal" class="text-gray-500 hover:text-red-500 text-xl">&times;</button>
                </div>

                <form id="addTagForm" method="post">
                    <!-- Tag Name Input -->
                    <div class="relative mb-4">
                        <input type="text" id="tagName" name="tagname" required
                               class="peer w-full p-3 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 outline-none"
                               placeholder=" " />
                        <label for="tagName"
                               class="absolute left-3 top-2 text-gray-500 text-sm transition-all peer-placeholder-shown:top-3 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-focus:top-[-10px] peer-focus:bg-white peer-focus:px-2 peer-focus:text-sm peer-focus:text-blue-500">
                            Tag Name
                        </label>
                        <p class="text-red-500 text-xs mt-1 hidden" id="errorTag">Tag name is required.</p>
                    </div>

                    <!-- Submit Button -->
                    <button id="AddButton" type="button"
                            class="w-full px-4 py-2 text-white bg-orange-600 rounded-md shadow-md hover:bg-orange-700 transition">
                        Add Tag
                    </button>
                </form>
            </div>
        </div>


        <table class="min-w-full bg-white border border-gray-200 shadow-md rounded-lg overflow-hidden">
            <thead class="bg-gray-100 text-gray-700">
            <tr>
                <th class="px-6 py-3 text-left text-sm font-semibold border-b">ID</th>
                <th class="px-6 py-3 text-left text-sm font-semibold border-b">Tag Name</th>
                <th class="px-6 py-3 text-left text-sm font-semibold border-b">Actions</th>
            </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
            {% for tag in Tags %}
                <tr class="hover:bg-gray-50 transition">
                    <td class="px-6 py-4 text-gray-700">{{ tag.tag_id }}</td>
                    <td class="px-6 py-4 text-gray-700">{{ tag.tag_name }}</td>
                    <td class="px-6 py-4">
                        <button
                                class="delete-tag px-4 py-2 text-sm font-medium text-white bg-red-500 hover:bg-red-600 rounded-md shadow-sm transition"
                                data-id="{{ tag.tag_id }}">
                            Delete
                        </button>
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
</div>
<script>
    function loadTags() {
        $.ajax({
            url: "http://localhost:4444/GetTags", // Backend API endpoint
            method: "GET",
            success: function (response) {

                try {
                    let jsonResponse = typeof response === "string" ? JSON.parse(response) : response;
                    if (jsonResponse.status) {
                        let tags = jsonResponse.data; // Assuming it's an array of tag objects
                        let tbodyHtml = "";

                        // Generate new table rows dynamically
                        tags.forEach(tag => {
                            tbodyHtml += `
                                <tr class="hover:bg-gray-50 transition">
                                    <td class="px-6 py-4 text-gray-700">${tag.tag_id}</td>
                                    <td class="px-6 py-4 text-gray-700">${tag.tag_name}</td>
                                    <td class="px-6 py-4">
                                        <button class="delete-tag px-4 py-2 text-sm font-medium text-white bg-red-500 hover:bg-red-600 rounded-md shadow-sm transition"
                                                data-id="${tag.tag_id}">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            `;
                        });

                        // Update only the <tbody>
                        $("tbody").html(tbodyHtml);
                    } else {
                        $("tbody").html("<tr><td colspan='3' class='text-center text-red-500 py-4'>No tags found.</td></tr>");
                    }
                } catch (e) {
                    console.error("JSON Parsing Error:", e);
                    $("tbody").html("<tr><td colspan='3' class='text-center text-red-500 py-4'>Error loading tags.</td></tr>");
                }
            },
            error: function () {
                $("tbody").html("<tr><td colspan='3' class='text-center text-red-500 py-4'>Failed to fetch data.</td></tr>");
            }
        });
    }



    $("#AddButton").on("click", function() {

        let tagname = $("#tagName").val().trim();
        $.ajax({
            url: "http://localhost:4444/AddTag",
            method:"POST",
            data:{ tagname:  tagname },
            success: function(response){
                $("#tagModal").addClass("hidden");
                $("#tagModal").reset()
                response = JSON.parse(response)

                let icon = response.status ? "success" : "error" ;
                swal({
                    position: "top-end",
                    icon: icon,
                    title: response.message,
                    showConfirmButton: false,
                    timer: 2000
                })
            }});
        loadTags()
    });
        // Open modal
    $("#openModal").on("click", function () {
        $("#tagModal").removeClass("hidden").addClass("flex");
    });

    // Close modal
    $("#closeModal").on("click", function () {
        $("#tagModal").addClass("hidden");
    });

    // Close modal when clicking outside
    $(document).on("click", function (event) {
        if ($(event.target).closest("#tagModal > div").length === 0 && !$(event.target).is("#openModal")) {
            $("#tagModal").addClass("hidden");
        }
    });

    $(".delete-tag").each(function() {
        $(this).on("click", function() {
            let button = $(this)
            let tagId = $(this).attr("data-id");
            button.addClass("cursor-not-allowed");
            $.ajax({
                url: "http://localhost:4444/DeleteTag/"+tagId,
                method:"POST",
                success: function(response){
                    console.log(response)
                    button.removeClass("cursor-not-allowed");
                    $(this).remove();
                    response = JSON.parse(response)
                    if (response.status) {
                        // Remove the row smoothly
                        button.closest("tr").fadeOut(300, function() {
                            $(this).remove();
                        });
                    } else {
                        alert("Error deleting tag: " + response.message);
                    }
                    // $("#SpinnerLoader").addClass("hidden");
                    // $("#MessageSection").html(result.message);
                    let icon = response.status ? "success" : "error" ;
                    swal({
                        position: "top-end",
                        icon: icon,
                        title: response.message,
                        showConfirmButton: false,
                        timer: 2000
                    })
                }});
        });
    });




</script>

{% endblock %}

