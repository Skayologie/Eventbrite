{% extends("layouts/master.twig") %}
{% block title %}
    Admin Dashboard
{% endblock  %}
{% block content %}
    <div class="flex">
        {% include 'layouts/aside.twig' with {active:"dashboard","role":role}  %}
        <div class="my-10 w-[80%] mx-auto">
            <!-- Header -->
            {% include 'layouts/adminheader.twig'   %}

            <!-- Stats Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <!-- Users Stat -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div class="bg-blue-100 p-3 rounded-lg">
                            <svg
                                    class="w-6 h-6 text-blue-600"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24">
                                <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                            </svg>
                        </div>
                        <span class="text-sm font-medium text-gray-500"
                        >vs last month</span
                        >
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-1">{{ TotalUsers }} User</h3>
                    <p class="text-sm text-gray-500">Total Users</p>

                </div>

                <!-- Events Stat -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div class="bg-orange-100 p-3 rounded-lg">
                            <svg
                                    class="w-6 h-6 text-orange-600"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24">
                                <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </div>
                        <div class="flex gap-2">
                  <span
                          class="px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full"
                  >156 Approved</span
                  >
                            <span
                                    class="px-2 py-1 bg-yellow-100 text-yellow-700 text-xs font-medium rounded-full"
                            >23 Pending</span
                            >
                        </div>
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-1">{{ TotalEvents }} Event</h3>
                    <p class="text-sm text-gray-500">Total Events</p>

                </div>

                <!-- Tickets Stat -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div class="bg-purple-100 p-3 rounded-lg">
                            <svg
                                    class="w-6 h-6 text-purple-600"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24">
                                <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                            </svg>
                        </div>
                        <span class="text-sm font-medium text-gray-500"
                        >This month</span
                        >
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-1">{{ TotalSoldTicket }}</h3>
                    <p class="text-sm text-gray-500">Tickets Sold</p>

                </div>

                <!-- Revenue Stat -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div class="bg-green-100 p-3 rounded-lg">
                            <svg
                                    class="w-6 h-6 text-green-600"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24">
                                <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <span class="text-sm font-medium text-gray-500"
                        >This month</span
                        >
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-1">{{ TotalRevenue }} MAD </h3>
                    <p class="text-sm text-gray-500">Total Revenue</p>

                </div>
            </div>

            <!-- Charts Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Category Distribution -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-6">
                        Popular Categories
                    </h3>
                    <canvas id="categoryChart" height="300"></canvas>
                </div>

                <!-- Revenue Trend -->
                <div class="bg-white rounded-2xl shadow-sm p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-6">
                        Revenue Trend
                    </h3>
                    <canvas id="revenueChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
    <script>
        //   dashboard script

        // Time period filter functionality
        const timeFilters = document.querySelectorAll('.time-filter');
        let currentPeriod = 'monthly';
        let charts = {};

        // Sample data for different time periods
        const chartData = {
            daily: {
                revenue: {
                    labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),
                    data: Array.from({ length: 24 }, () =>
                        Math.floor(Math.random() * 5000)
                    )
                },
                categories: {
                    data: [15, 12, 8, 7, 5, 3]
                }
            },
            weekly: {
                revenue: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    data: Array.from({ length: 7 }, () =>
                        Math.floor(Math.random() * 20000)
                    )
                },
                categories: {
                    data: [25, 20, 12, 10, 8, 5]
                }
            },
            monthly: {
                revenue: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    data: [30000, 35000, 32000, 45000, 48000, 52389]
                },
                categories: {
                    data: [30, 25, 15, 13, 10, 7]
                }
            },
            yearly: {
                revenue: {
                    labels: ['2020', '2021', '2022', '2023', '2024'],
                    data: [250000, 320000, 420000, 480000, 520000]
                },
                categories: {
                    data: [35, 28, 18, 15, 12, 8]
                }
            }
        };

        // Initialize charts
        function initializeCharts() {
            // Category Distribution Chart
            charts.category = new Chart(document.getElementById('categoryChart'), {
                type: 'doughnut',
                data: {
                    labels: [
                        'Music',
                        'Tech',
                        'Sports',
                        'Art',
                        'Food & Drink',
                        'Business'
                    ],
                    datasets: [
                        {
                            data: chartData.monthly.categories.data,
                            backgroundColor: [
                                'rgba(249, 115, 22, 0.8)',
                                'rgba(59, 130, 246, 0.8)',
                                'rgba(16, 185, 129, 0.8)',
                                'rgba(236, 72, 153, 0.8)',
                                'rgba(245, 158, 11, 0.8)',
                                'rgba(107, 114, 128, 0.8)'
                            ],
                            borderColor: 'white',
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                font: { family: 'Poppins' }
                            }
                        }
                    }
                }
            });

            // Revenue Trend Chart
            charts.revenue = new Chart(document.getElementById('revenueChart'), {
                type: 'line',
                data: {
                    labels: chartData.monthly.revenue.labels,
                    datasets: [
                        {
                            label: 'Revenue',
                            data: chartData.monthly.revenue.data,
                            borderColor: 'rgb(249, 115, 22)',
                            backgroundColor: 'rgba(249, 115, 22, 0.1)',
                            fill: true,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { display: false } },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: value => '$' + value.toLocaleString(),
                                font: { family: 'Poppins' }
                            }
                        },
                        x: {
                            grid: { display: false },
                            ticks: { font: { family: 'Poppins' } }
                        }
                    }
                }
            });
        }

        // Update charts based on time period
        function updateCharts(period) {
            // Update revenue chart
            charts.revenue.data.labels = chartData[period].revenue.labels;
            charts.revenue.data.datasets[0].data = chartData[period].revenue.data;
            charts.revenue.update();

            // Update category chart
            charts.category.data.datasets[0].data =
                chartData[period].categories.data;
            charts.category.update();

            // Update stats cards with animations
            updateStatsCards(period);
        }

        // Update stats cards with animations
        function updateStatsCards(period) {
            const cards = document.querySelectorAll('.rounded-2xl');
            cards.forEach(card => {
                const stat = card.querySelector('h3');
                if (stat) {
                    // Add fade-out effect
                    stat.style.opacity = '0';
                    setTimeout(() => {
                        // Update value and fade in
                        if (stat.textContent.includes('$')) {
                            stat.textContent = `$${Math.floor(Math.random() * 90000)}`;
                        } else {
                            stat.textContent = Math.floor(Math.random() * 5000);
                        }
                        stat.style.opacity = '1';
                    }, 200);
                }
            });
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            initializeCharts();

            // Time filter click handlers
            timeFilters.forEach(filter => {
                filter.addEventListener('click', () => {
                    // Update active state
                    timeFilters.forEach(f => {
                        f.classList.remove('bg-white', 'shadow-sm', 'text-orange-500');
                    });
                    filter.classList.add('bg-white', 'shadow-sm', 'text-orange-500');

                    // Update charts
                    const period = filter.dataset.period;
                    currentPeriod = period;
                    updateCharts(period);
                });
            });
        });

        // Add interactivity to the stats cards
        document.querySelectorAll('.rounded-2xl').forEach(card => {
            card.addEventListener('mouseover', () => {
                card.classList.add(
                    'transform',
                    'scale-105',
                    'transition-all',
                    'duration-300',
                    'shadow-md'
                );
            });
            card.addEventListener('mouseout', () => {
                card.classList.remove(
                    'transform',
                    'scale-105',
                    'transition-all',
                    'duration-300',
                    'shadow-md'
                );
            });
        });

    </script>
{% endblock %}